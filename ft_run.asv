clear
clc

dt = 0.001;                 %Periodo di campionamento
t = 0:dt:16;                %Asse dei tempi
nsampl = length(t);         %Numero di campioni
x = zeros(3, nsampl);       %Vettore degli stati
P = zeros(3,3,nsampl);      %Matrice di covarianza

%Frequenza reale (iniziale)
omega = pi;

%Generazione segnale
y = (t>=0 & t<=8).*cos(omega*t) + (t>8).*cos(4*omega*t);
yMeas = zeros(1,nsampl);

%Condizioni iniziali
x(:,1) = [1 0 omega];
P(:,:,1) = eye(3);

%Inizializzazione parametri
lambda = 1e0;               %Parametro regolabile per la performance del filtro
r = 1e-1;                   %Varianza del rumore sulla misura

%Esecuzione algoritmo
for k = 1:nsampl-1
yMeas(k) = y(k) + wgn(1,1,10*log10(r));
[x(:,k+1), P(:,:,k+1)] = freq_track(dt,yMeas(k),x(:,k),P(:,:,k),lambda);
end

%Disegno
figure(1)
subplot(2,1,1)
plot(t,y,t,yMeas,t,x(1,:),'k');
legend('y','y misurata','y stimata');
grid on
subplot(2,1,2)
plot(t,realFreq,'--',t,x(3,:));
legend('frequenza reale', 'frequenza stimata');
grid on
figure(2)
subplot(2,1,1)
a = abs(x(1,:)+1i*x(2,:));
plot(t, a)
ylabel('Ampiezza');
grid on
subplot(2,1,2)
arg = angle(x(1,:)+1i*x(2,:));
plot(t,arg);
ylabel('Fase');
varf = zeros(1,nsampl);
for k=1:nsampl
    varf(k) = P(3,3,k);
end
figure(3)
plot(t,varf);
sprintf('Errore quadratico medio della stima della frequenza: %f', mean((realFreq-x(3,:)).^2))
sprintf('Errore quadratico medio della stima del segnale: %f', mean((y-x(1,:)).^2))